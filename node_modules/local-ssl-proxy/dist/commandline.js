'use strict';

function _interopDefault (ex) { return 'default' in ex ? ex['default'] : ex; }

var nomnom = _interopDefault(require('nomnom'));
var Path = _interopDefault(require('path'));
var fs = _interopDefault(require('fs'));

var name = "local-ssl-proxy";
var version = "1.3.0";
var author = "Cameron Hunter <hello@cameronhunter.co.uk>";
var description = "Simple SSL HTTP proxy using a self-signed certificate. Intended for local development only.";
var repository = { "type": "git", "url": "http://github.com/cameronhunter/local-ssl-proxy.git" };
var license = "MIT";
var bin = { "local-ssl-proxy": "bin/local-ssl-proxy" };
var files = ["bin", "dist", "resources"];
var scripts = { "build": "rollup -c", "pretest": "npm run build", "test": "ava", "prepublish": "npm run test" };
var dependencies = { "chalk": "^1.1.1", "http-proxy": "^1.13.1", "nomnom": "^1.8.1" };
var devDependencies = { "ava": "^0.11.0", "babel-preset-es2015-rollup": "^1.1.1", "babel-preset-stage-1": "^6.3.13", "rollup": "^0.25.2", "rollup-plugin-babel": "^2.3.9", "rollup-plugin-json": "^2.0.0" };
var Package = {
	name: name,
	version: version,
	author: author,
	description: description,
	repository: repository,
	license: license,
	bin: bin,
	files: files,
	scripts: scripts,
	dependencies: dependencies,
	devDependencies: devDependencies
};

var exists = function exists(path) {
  return fs.accessSync(absolutePath(path));
};
var absolutePath = function absolutePath(path) {
  return Path.isAbsolute(path) ? path : Path.resolve(process.cwd(), path);
};

var options = {
  hostname: {
    abbr: 'n',
    default: 'localhost'
  },
  source: {
    abbr: 's',
    default: 9001
  },
  target: {
    abbr: 't',
    default: 9000
  },
  cert: {
    abbr: 'c',
    default: Path.resolve(__dirname, '..', 'resources', 'localhost.cert'),
    callback: exists
  },
  key: {
    abbr: 'k',
    default: Path.resolve(__dirname, '..', 'resources', 'localhost.key'),
    callback: exists
  },
  config: {
    abbr: 'o',
    callback: exists,
    transform: function transform(path) {
      return require(absolutePath(path));
    }
  },
  version: {
    abbr: 'v',
    flag: true,
    callback: function callback() {
      return Package.version;
    }
  }
};

var commandline = nomnom.script(Package.name).options(options);

module.exports = commandline;